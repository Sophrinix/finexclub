#!/usr/bin/ruby

require 'rubygems'
require "net/http"
require "uri"
require "cgi"
require File.dirname(__FILE__) + "/../lib/finexclub"
require "optparse"

module Generator
  class << self
    def get(gen)
      class_name = gen.to_s.gsub(/^(.)/) { $1.upcase }
      const_get(class_name).new
    end

    def all
      constants.map { |e| e.downcase }
    end

    def rand_price(n = nil)
      n ||= 10000
      rand(n)/n.to_f
    end

    def rand_index
      rand(100) 
    end
  end


  class Alpha
    def name
      'alpha'
    end

    def generate(options = {})
      Finexclub::Chart::SYMBOLS.inject([]) do |data, symbol| 
        data << ["alpha[][symbol]", symbol.upcase]
        data << ["alpha[][index]", Generator.rand_index]
        data << ["alpha[][direction]", rand > 0.5? 1 : 0]
      end
    end
  end

  class Zeta
    def name
      'zeta'
    end

    def generate(options = {})
      symbol = options[:symbol] || raise("--symbol option is missing")
      data = []
      data << ["zeta[][symbol]", symbol.upcase]
      data << ["zeta[][up_support]", Generator.rand_price]
      data << ["zeta[][up_resist]", Generator.rand_price]
      data << ["zeta[][down_support]", Generator.rand_price]
      data << ["zeta[][down_resist]", Generator.rand_price]
      data << ["zeta[][screenshot_filename]", "#{symbol.upcase}_ZETA.gif"]
    end
  end

  class Prognosis
    def name
      'prognosis'
    end

    def generate(options = {})
      symbol = options[:symbol] || raise("--symbol option is missing")
      actions = %w(buy sell hold_sell hold_buy stop)
      data = []
      data << ["prognosis[][symbol]", symbol.upcase]
      data << ["prognosis[][action]", actions[rand(actions.size)]]
      data << ["prognosis[][take_profit]", Generator.rand_price]
      data << ["prognosis[][profit]", Generator.rand_index]
      data << ["prognosis[][screenshot_filename]", "PROGNOSIS.png"]
    end
  end

  class Octopus
    def name
      'octopus'
    end

    def generate(options = {})
      symbol = options[:symbol] || raise("--symbol option is missing")
      actions = %w(buy sell hold_sell hold_buy stop)
      data = []
      data << ["octopus[][symbol]", symbol.upcase]
      data << ["octopus[][action]", actions[rand(actions.size)]]
      data << ["octopus[][take_profit]", Generator.rand_price]
      data << ["octopus[][profit]", rand(100)]
      data << ["octopus[][stop_loss]", Generator.rand_price]
      data << ["octopus[][loss]", rand(100)]
      data << ["octopus[][index]", Generator.rand_index]
      data << ["octopus[][screenshot_filename]", "OCTOPUS.png"]
    end
  end
end

class FakeUpdater
  def initialize(host, port)
    @host = host
    @port = port 
  end

  def send(generator, options = {})
    puts "Sending '#{generator.name}' to #{@host}:#{@port}"
    begin
      data = join_params(generator.generate(options))
      http = Net::HTTP.new(@host, @port)
      response = http.post("/#{generator.name}", data)
      puts "Done... #{response.value}"
    rescue Exception => e
      puts "...Failed!"
      puts e.message
    end
  end

  def join_params(params)
    params.map {|k,v| "#{CGI::escape(k)}=#{CGI::escape(v.to_s)}"}.join('&')
  end
end

STRATEGIES = %w(trends finexclub)

options = {}
options[:host] = 'localhost'
options[:port] = 9292
opts = OptionParser.new do |opts|
  opts.banner = "Usage: finexclub_updater [options]"
  
  opts.on("-a", "--address ADDRESS", "Host to send, default is #{options[:host]}") do |h|
    options[:host] = h
  end

  opts.on("-p", "--port PORT", "Use port, default is #{options[:port]}") do |p|
    options[:port] = p
  end

  opts.on("-s", "--symbol SYMBOL", "Symbol to use (eurusd, audchf...)") do |s|
    options[:symbol] = s
  end

  opts.on_tail("-h", "Help") do |s|
    puts opts
    exit
  end

  opts.on_tail("-g GENERATOR", Generator.all, "One of the generators to send (#{(Generator.all).join(', ')})") do |g|
    options[:generator] = g
  end

  opts.on_tail("-r STRATEGY", STRATEGIES, "One of the strategies to use (#{STRATEGIES.join(', ')})") do |r|
    options[:strategy] = r
  end
end
opts.parse!

unless options[:generator].nil?
  FakeUpdater.new(options[:host], options[:port]).send(Generator.get(options[:generator]), options)
  exit
end

case options[:strategy]
when 'trends'
  f = FakeUpdater.new(options[:host], options[:port])
  f.send(Generator::Alpha.new)
  Finexclub::Chart::SYMBOLS.each do |symbol|
    f.send(Generator::Zeta.new, :symbol => symbol)
  end
when 'finexclub'
  f = FakeUpdater.new(options[:host], options[:port])
  Finexclub::Chart::SYMBOLS.each do |symbol|
    f.send(Generator::Octopus.new, :symbol => symbol)
    f.send(Generator::Prognosis.new, :symbol => symbol)
  end
else
  puts opts
end

